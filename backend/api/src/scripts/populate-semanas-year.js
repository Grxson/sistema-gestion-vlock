/**
 * Script para poblar la tabla semanas_nominas con las semanas ISO de cualquier a√±o
 * Uso: node src/scripts/populate-semanas-year.js [a√±o]
 * Ejemplo: node src/scripts/populate-semanas-year.js 2026
 * Si no se especifica a√±o, usa el a√±o actual
 */

const fs = require('fs');
const path = require('path');

// Cargar variables de entorno desde src/.env
const envPath = path.join(__dirname, '..', '.env');
if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
            const [key, ...valueParts] = trimmed.split('=');
            if (key && valueParts.length > 0) {
                const value = valueParts.join('=').trim();
                process.env[key.trim()] = value.replace(/^["']|["']$/g, '');
            }
        }
    });
    console.log('‚úÖ Variables de entorno cargadas desde .env\n');
} else {
    console.error('‚ùå No se encontr√≥ el archivo .env en:', envPath);
    process.exit(1);
}

const sequelize = require('../config/db');
const { generarInfoSemana } = require('../utils/weekCalculator');

async function populateSemanasYear(a√±o) {
  try {
    console.log(`üîÑ Iniciando poblaci√≥n de semanas ISO ${a√±o} (algoritmo ISO 8601)...\n`);

    // Generar todas las semanas del a√±o especificado
    const semanas = [];

    // Empezar desde el 1 de enero del a√±o
    let fechaActual = new Date(a√±o, 0, 1);
    const fechaFinal = new Date(a√±o, 11, 31);

    const semanasVistas = new Set();

    while (fechaActual <= fechaFinal) {
      const infoSemana = generarInfoSemana(fechaActual);
      
      // Crear clave √∫nica para evitar duplicados
      const clave = `${infoSemana.a√±o}-${infoSemana.semanaISO}`;
      
      if (!semanasVistas.has(clave)) {
        semanasVistas.add(clave);
        
        // Solo agregar si el a√±o coincide o si es una semana que toca el a√±o solicitado
        if (infoSemana.a√±o === a√±o || 
            infoSemana.fechaInicio.getFullYear() === a√±o || 
            infoSemana.fechaFin.getFullYear() === a√±o) {
          
          // Verificar si ya existe en la base de datos
          const [existente] = await sequelize.query(
            `SELECT id_semana FROM semanas_nominas WHERE anio = ? AND semana_iso = ?`,
            {
              replacements: [infoSemana.a√±o, infoSemana.semanaISO]
            }
          );

          if (existente.length === 0) {
            semanas.push({
              anio: infoSemana.a√±o,
              semana_iso: infoSemana.semanaISO,
              etiqueta: infoSemana.etiqueta,
              fecha_inicio: infoSemana.fechaInicio,
              fecha_fin: infoSemana.fechaFin,
              estado: 'Borrador'
            });
            
            console.log(`‚úì Semana ${infoSemana.semanaISO} de ${infoSemana.a√±o}: ${infoSemana.etiqueta}`);
            console.log(`  Rango: ${infoSemana.fechaInicio.toLocaleDateString('es-MX')} - ${infoSemana.fechaFin.toLocaleDateString('es-MX')}`);
          } else {
            console.log(`‚è≠Ô∏è  Semana ${infoSemana.semanaISO} de ${infoSemana.a√±o} ya existe, omitiendo...`);
          }
        }
      }
      
      // Avanzar 7 d√≠as
      fechaActual.setDate(fechaActual.getDate() + 7);
    }

    if (semanas.length === 0) {
      console.log(`\n‚úÖ Todas las semanas del a√±o ${a√±o} ya existen en la base de datos`);
      process.exit(0);
    }

    console.log(`\nüìä Total de semanas nuevas a insertar: ${semanas.length}`);
    console.log('üíæ Insertando en la base de datos...\n');

    // Insertar todas las semanas en la base de datos
    for (const semana of semanas) {
      await sequelize.query(
        `INSERT INTO semanas_nominas (anio, semana_iso, etiqueta, fecha_inicio, fecha_fin, estado, createdAt, updatedAt)
         VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())`,
        {
          replacements: [
            semana.anio,
            semana.semana_iso,
            semana.etiqueta,
            semana.fecha_inicio,
            semana.fecha_fin,
            semana.estado
          ]
        }
      );
    }

    console.log('‚úÖ Todas las semanas han sido insertadas exitosamente');
    console.log(`üìã Total de registros insertados: ${semanas.length} semanas\n`);

    // Mostrar resumen
    console.log('üìä Resumen de semanas insertadas por a√±o:');
    const semanasPorA√±o = {};
    semanas.forEach(s => {
      semanasPorA√±o[s.anio] = (semanasPorA√±o[s.anio] || 0) + 1;
    });
    Object.entries(semanasPorA√±o).forEach(([a√±o, cantidad]) => {
      console.log(`   ${a√±o}: ${cantidad} semanas`);
    });

    console.log('\nüí° Tip: El sistema crear√° autom√°ticamente las semanas que falten cuando se necesiten.');
    console.log('   Este script es opcional y solo sirve para pre-poblar la base de datos.\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error al poblar semanas:', error);
    process.exit(1);
  }
}

// Obtener a√±o de los argumentos o usar el a√±o actual
const a√±oArgumento = process.argv[2];
const a√±o = a√±oArgumento ? parseInt(a√±oArgumento) : new Date().getFullYear();

if (isNaN(a√±o) || a√±o < 2000 || a√±o > 2100) {
  console.error('‚ùå A√±o inv√°lido. Debe ser un n√∫mero entre 2000 y 2100.');
  console.log('Uso: node src/scripts/populate-semanas-year.js [a√±o]');
  console.log('Ejemplo: node src/scripts/populate-semanas-year.js 2026');
  process.exit(1);
}

// Ejecutar el script
populateSemanasYear(a√±o);
