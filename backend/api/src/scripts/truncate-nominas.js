/**
 * Script para limpiar todas las tablas relacionadas con n√≥minas
 * ADVERTENCIA: Este script eliminar√° TODOS los datos de n√≥minas
 * Ejecutar solo si est√°s seguro de querer empezar de cero
 */

const fs = require('fs');
const path = require('path');

// Cargar variables de entorno desde src/.env
const envPath = path.join(__dirname, '..', '.env');
if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#')) {
            const [key, ...valueParts] = trimmed.split('=');
            if (key && valueParts.length > 0) {
                const value = valueParts.join('=').trim();
                process.env[key.trim()] = value.replace(/^["']|["']$/g, '');
            }
        }
    });
    console.log('‚úÖ Variables de entorno cargadas desde .env\n');
} else {
    console.error('‚ùå No se encontr√≥ el archivo .env en:', envPath);
    process.exit(1);
}

const sequelize = require('../config/db');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function truncateNominas() {
  try {
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: Este script eliminar√° TODOS los datos de n√≥minas');
    console.log('üìã Tablas que ser√°n limpiadas:');
    console.log('   - nomina_historials');
    console.log('   - pagos_nominas');
    console.log('   - adeudos_empleados');
    console.log('   - nomina_empleados');
    console.log('   - semanas_nominas');
    console.log('\n');

    rl.question('¬øEst√°s seguro de que quieres continuar? (escribe "SI" para confirmar): ', async (answer) => {
      if (answer.toUpperCase() !== 'SI') {
        console.log('‚ùå Operaci√≥n cancelada');
        rl.close();
        process.exit(0);
      }

      try {
        console.log('\nüîÑ Iniciando limpieza de tablas...\n');

        // Deshabilitar verificaci√≥n de claves for√°neas
        await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');
        console.log('‚úì Claves for√°neas deshabilitadas temporalmente');

        // Limpiar tabla de historial de n√≥minas (nombre correcto: nomina_historials)
        await sequelize.query('TRUNCATE TABLE nomina_historials');
        console.log('‚úì Tabla nomina_historials limpiada');

        // Limpiar tabla de pagos de n√≥minas (nombre correcto: pagos_nominas)
        await sequelize.query('TRUNCATE TABLE pagos_nominas');
        console.log('‚úì Tabla pagos_nominas limpiada');

        // Limpiar tabla de adeudos de empleados
        await sequelize.query('TRUNCATE TABLE adeudos_empleados');
        console.log('‚úì Tabla adeudos_empleados limpiada');

        // Limpiar tabla principal de n√≥minas
        await sequelize.query('TRUNCATE TABLE nomina_empleados');
        console.log('‚úì Tabla nomina_empleados limpiada');

        // Limpiar tabla de semanas de n√≥mina
        await sequelize.query('TRUNCATE TABLE semanas_nominas');
        console.log('‚úì Tabla semanas_nominas limpiada');

        // Rehabilitar verificaci√≥n de claves for√°neas
        await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
        console.log('‚úì Claves for√°neas rehabilitadas');

        console.log('\n‚úÖ Todas las tablas de n√≥minas han sido limpiadas exitosamente');
        console.log('‚ö†Ô∏è  Ahora puedes empezar a crear n√≥minas con el algoritmo corregido\n');

        rl.close();
        process.exit(0);
      } catch (error) {
        console.error('\n‚ùå Error al limpiar las tablas:', error);
        
        // Intentar rehabilitar claves for√°neas en caso de error
        try {
          await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
        } catch (e) {
          console.error('Error al rehabilitar claves for√°neas:', e);
        }
        
        rl.close();
        process.exit(1);
      }
    });
  } catch (error) {
    console.error('‚ùå Error al conectar con la base de datos:', error);
    rl.close();
    process.exit(1);
  }
}

// Ejecutar el script
truncateNominas();
